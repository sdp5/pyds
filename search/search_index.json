{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyDS For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-pyds","text":"For full documentation visit mkdocs.org .","title":"Welcome to PyDS"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"examples/","text":"Examples","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"log/","text":"Log Subject Ch Point When? Misc Other start 0: OoCh 0.1 20190603 - - complete 0: OoCh - 20190624 - - niddle 1: Intro 1.4 20190624 Upto 1.3 Data Structure text","title":"Log"},{"location":"log/#log","text":"Subject Ch Point When? Misc Other start 0: OoCh 0.1 20190603 - - complete 0: OoCh - 20190624 - - niddle 1: Intro 1.4 20190624 Upto 1.3 Data Structure text","title":"Log"},{"location":"notes/","text":"Notes CH 1: Introduction 1.1 Variables Variables are names (x and y) of the placeholders for representing data. 1.2 Data Types A set of data with predefined values, example: integer, floating point, unit number, character, string, etc. In memory we combine 2 bytes (16 bits) and call it an integer. Similarly, 4 bytes (32 bits) for float. System defined data types (Primitive data types) int , float , char , double , bool , etc. User defined data types structures , union , classes 1.3 Data Structures Particular way of storing and organizing in a computer so that it can be used efficiently. Example arrays , files , linked list , stacks , queues , trees , graphs and so on. Linear data structure: Linked List, Stacks and Queues. Non-linear data structure: Trees and Graphs. CH 0: Organization of Chapters Three things required to build good understanding of data structure are: How the information is arranged in the memory of the computer? Become familiar with the algorithms for manipulating the information contained in the data structure. Understand the performance characteristics of the data structure. to select a suitable data structure for a particular application. Definitions Recursion is the process of defining a function or calculating a number by the repeated application of an algorithm. Backtracking The solution process consists of working through a sequence of decision points in which each choice leads further along some path (example Trees or Graphs). In case of incorrect choice somewhere along the way, developer has to backtrack to a previous decision point and try a different path. Backtracking algorithms use this approach, moreover, it's a form of recursion. Linked Lists (dynamic) Number of nodes can grow and shrink on demand. Used to create trees, graphs, hashing, etc. Stacks (abstract) A container of objects that are inserted and removed according to the last-in-first-out LIFO principle. Applications: Internal creation of function parameters and local variables. Compiler's syntax check for matching braces; Support for recursion. Can act as an auxiliary data structure for other abstract data types. Queues (abstract) Similar to stacks but follow FIFO . Applications: In OS, for controlling access to shared system resources such as printers, files, communication lines, disks and tapes. Computer systems must often provide a holding area buffer for messages between two processes, two programs, or even two systems. Can act as an auxiliary data structure for other abstract data types. Trees (abstract) Data organization to make the data insertion or deletion or search faster. Applications: Library db, School's student db, employ or patient db; any db would be implemented using trees. OS file systems; Can act as an auxiliary data structure for other abstract data types. Tree variants are classified by the number of children and the way of interconnecting them. Priority Queues (abstract) Maintain a collection of prioritized elements. Application: operating systems often use a priority queue for the ready queue of processes to run on the CPU. Graphs (fundamental - non linear) Collection of nodes vertices and their connections edges . Used to model many types of relations and processes. Disjoint Set (abstract) Collection of disjoint sets partition . Example: Motorola , YouTube , and Android are all members of the Google set. Two operations: Union: merging of two sets into one! Find Query: takes an item and returns which set it belongs to. Application: Maze generation and Kruskal's algo for computing the minimum spanning tree of a graph. Sorting Arranges the elements of a list in a certain order; sometimes reduces the complexity of problem significantly. Applications: searching elements and db algorithms. Searching The process of finding an item with specified properties from a collection of items. Data organization improves the searching process. Selection Algo ( k th order statistic) Finding the minimum, maximum and median elements in a given list. Symbol Tables (dictionaries) Examples: spelling checker, data dictionary found in DBMS, symbol tables generated by loaders, assemblers, and compilers, as well as routing tables in networking components (DNS Lookup). Hashing Technique used for storing and retrieving information as fast as possible. Used in optimal search and symbol tables. The worst case complexity of hashing is O(n), but it gives O(1) on the average. String Algo Operations like auto completion (on CLI or browser) or string matching need a data structure which stores the string data efficiently. Algo Design Techniques There are different ways of classifying the algorithms like Greedy, Divide and Conquer, and Dynamic Programming. Greedy Algo ( single-minded algorithm) Process that looks for a simple, easy to implement solutions to complex, multi-step problems by deciding which next step will provide the most obvious benefit. Example: selection sort, Prim's algorithms, Kruskal's algorithms, Dijkstra algorithm, Huffman coding algorithm etc. Divide and Conquer Principles: (examples include binary search, merge sort, etc.) Divide - break the problem into several subproblems that are similar to the original problem but smaller in size. Conquer - solve the subproblems recursively. Base case - If the subproblem size is small enough then solve the subproblem directly without more recursion. Combine - the solutions to create a solution for the original problem. Dynamic Programming (optimization over plain recursion) Breaking down a complex problem into a collection of simpler subproblems. Solving each of those and storing their solutions using a memory-based data structure (array, map, etc). Complexity Classes (resources required during computation - time vs space) Classification is done based on the running time (or memory) that an algorithm takes for solving the problem. Bit-wise Hacking Applications: Kind of file format or network protocol that uses individual bits or group of bits to represent pieces of information. Setting individual pixels on the screen by directly manipulating the video memory, where every pixel's color is represented by 1 or 4 bits. Compute some kind of checksum (possibly, parity or CRC) or hash value.","title":"Notes"},{"location":"notes/#notes","text":"","title":"Notes"},{"location":"notes/#ch-1-introduction","text":"","title":"CH 1: Introduction"},{"location":"notes/#11-variables","text":"Variables are names (x and y) of the placeholders for representing data.","title":"1.1 Variables"},{"location":"notes/#12-data-types","text":"A set of data with predefined values, example: integer, floating point, unit number, character, string, etc. In memory we combine 2 bytes (16 bits) and call it an integer. Similarly, 4 bytes (32 bits) for float. System defined data types (Primitive data types) int , float , char , double , bool , etc. User defined data types structures , union , classes","title":"1.2 Data Types"},{"location":"notes/#13-data-structures","text":"Particular way of storing and organizing in a computer so that it can be used efficiently. Example arrays , files , linked list , stacks , queues , trees , graphs and so on. Linear data structure: Linked List, Stacks and Queues. Non-linear data structure: Trees and Graphs.","title":"1.3 Data Structures"},{"location":"notes/#ch-0-organization-of-chapters","text":"","title":"CH 0: Organization of Chapters"},{"location":"notes/#three-things-required-to-build-good-understanding-of-data-structure-are","text":"How the information is arranged in the memory of the computer? Become familiar with the algorithms for manipulating the information contained in the data structure. Understand the performance characteristics of the data structure. to select a suitable data structure for a particular application.","title":"Three things required to build good understanding of data structure are:"},{"location":"notes/#definitions","text":"Recursion is the process of defining a function or calculating a number by the repeated application of an algorithm. Backtracking The solution process consists of working through a sequence of decision points in which each choice leads further along some path (example Trees or Graphs). In case of incorrect choice somewhere along the way, developer has to backtrack to a previous decision point and try a different path. Backtracking algorithms use this approach, moreover, it's a form of recursion. Linked Lists (dynamic) Number of nodes can grow and shrink on demand. Used to create trees, graphs, hashing, etc. Stacks (abstract) A container of objects that are inserted and removed according to the last-in-first-out LIFO principle. Applications: Internal creation of function parameters and local variables. Compiler's syntax check for matching braces; Support for recursion. Can act as an auxiliary data structure for other abstract data types. Queues (abstract) Similar to stacks but follow FIFO . Applications: In OS, for controlling access to shared system resources such as printers, files, communication lines, disks and tapes. Computer systems must often provide a holding area buffer for messages between two processes, two programs, or even two systems. Can act as an auxiliary data structure for other abstract data types. Trees (abstract) Data organization to make the data insertion or deletion or search faster. Applications: Library db, School's student db, employ or patient db; any db would be implemented using trees. OS file systems; Can act as an auxiliary data structure for other abstract data types. Tree variants are classified by the number of children and the way of interconnecting them. Priority Queues (abstract) Maintain a collection of prioritized elements. Application: operating systems often use a priority queue for the ready queue of processes to run on the CPU. Graphs (fundamental - non linear) Collection of nodes vertices and their connections edges . Used to model many types of relations and processes. Disjoint Set (abstract) Collection of disjoint sets partition . Example: Motorola , YouTube , and Android are all members of the Google set. Two operations: Union: merging of two sets into one! Find Query: takes an item and returns which set it belongs to. Application: Maze generation and Kruskal's algo for computing the minimum spanning tree of a graph. Sorting Arranges the elements of a list in a certain order; sometimes reduces the complexity of problem significantly. Applications: searching elements and db algorithms. Searching The process of finding an item with specified properties from a collection of items. Data organization improves the searching process. Selection Algo ( k th order statistic) Finding the minimum, maximum and median elements in a given list. Symbol Tables (dictionaries) Examples: spelling checker, data dictionary found in DBMS, symbol tables generated by loaders, assemblers, and compilers, as well as routing tables in networking components (DNS Lookup). Hashing Technique used for storing and retrieving information as fast as possible. Used in optimal search and symbol tables. The worst case complexity of hashing is O(n), but it gives O(1) on the average. String Algo Operations like auto completion (on CLI or browser) or string matching need a data structure which stores the string data efficiently. Algo Design Techniques There are different ways of classifying the algorithms like Greedy, Divide and Conquer, and Dynamic Programming. Greedy Algo ( single-minded algorithm) Process that looks for a simple, easy to implement solutions to complex, multi-step problems by deciding which next step will provide the most obvious benefit. Example: selection sort, Prim's algorithms, Kruskal's algorithms, Dijkstra algorithm, Huffman coding algorithm etc. Divide and Conquer Principles: (examples include binary search, merge sort, etc.) Divide - break the problem into several subproblems that are similar to the original problem but smaller in size. Conquer - solve the subproblems recursively. Base case - If the subproblem size is small enough then solve the subproblem directly without more recursion. Combine - the solutions to create a solution for the original problem. Dynamic Programming (optimization over plain recursion) Breaking down a complex problem into a collection of simpler subproblems. Solving each of those and storing their solutions using a memory-based data structure (array, map, etc). Complexity Classes (resources required during computation - time vs space) Classification is done based on the running time (or memory) that an algorithm takes for solving the problem. Bit-wise Hacking Applications: Kind of file format or network protocol that uses individual bits or group of bits to represent pieces of information. Setting individual pixels on the screen by directly manipulating the video memory, where every pixel's color is represented by 1 or 4 bits. Compute some kind of checksum (possibly, parity or CRC) or hash value.","title":"Definitions"},{"location":"problems/","text":"Problems","title":"Problems"},{"location":"problems/#problems","text":"","title":"Problems"},{"location":"review/","text":"Data Structure Basics Arrays Definition Stores data elements based on an sequential, most commonly 0 based, index. Based on Tuples from set theory. They are one of the oldest, most commonly used data structure. Can be many-dimensional to represent matrices What you need to know Optimal for indexing; bad at searching, inserting, and deleting (except at the end). Linear Arrays , or one dimensional arrays are the most basic. Are static in size, meaning that they are declared with a fixed size. Dynamic Arrays are like one dimensional arrays, but have reserved space for additional elements. If a dynamic array is full, it copies it's contents to a larger array. Two Dimensional Arrays have x and y indices like a grid or nested arrays. Big O Efficiency Indexing Linear Array: O(1), Dynamic Array: O(1) Search Linear Array: O(n), Dynamic Array: O(n) Optimized Search Linear Array: O(log n), Dynamic Array: O(log n) is Binary Search Insertion Linear Array: N/A, Dynamic Array: O(n) Linked List Definition Stores data with nodes that points to other nodes. Nodes, at its most basic it has one datum and one reference (another node). A linked list chains nodes together by pointing one node's reference towards another node. What you need to know Designed to optimize insertion and deletion, slow at indexing and searching. Doubly linked list has nodes that also reference the previous node. Circular linked list is simple linked list whose tail , the last node, references the head , the first node. Stack , commonly implemented with linked lists but can be made from arrays too. Stack are last in, first out (LIFO) data structures. Made with a linked list by having the head be the only place for insertion and removal. Queues , too can be implemented with an linked list or an array. Queues are a first in, first out (FIFO) data structure. Made with a doubly linked list that only removes from head and adds to tail. Big O Efficiency Indexing Linked Lists: O(n) Search Linked Lists: O(n) Optimized Search Linked Lists: O(n) Insertion Linked Lists: O(n) Hash Table or Hash Map Definition Stores data with key value pairs. And don't generally have an order. Hash functions accept arbitrary sized data and map it to fixed size data. The mapping is not guaranteed to be unique. This is known as hashing , which is the concept that an input and an output have a one-to-one correspondence to map information. Hash functions return a unique address in memory for that data. What you need to know Designed to optimize searching, insertion, and deletion Hash collisions are when a hash function returns the same output for two distinct inputs. All hash functions have this problem. This is often accommodated for by having the hash tables be very large. Hashes are important for associated arrays and database indexing. Big O Efficiency Indexing Hash Tables: O(1) Search Hash Tables: O(1) Insertion Hash Tables: O(1) Binary Tree Definition Is a tree like data structure where every node has at most two children. There is one left and right child node. What you need to know Designed to optimize searching and sorting. A degenerate tree is an unbalanced tree, which if entirely one-sided is an essentially a linked list. They are comparably simple to implement than other data structures. Used to make binary search trees . A binary tree that uses comparable keys to assign which direction a child is. Left child has a key smaller than it's parent node. Right child has a key greater than it's parent node. There can be no duplicate node. Because of the above it is more likely to be used as a data structure than a binary tree. Big O Efficiency Indexing Binary Search Tree: O(log n) Search Binary Search Tree: O(log n) Insertion Binary Search Tree: O(log n) Search Basics Breadth First Search Definition An algorithm that searches a tree (or graph) by searching levels of the tree first, starting at the root. It finds every node on the same level, most often moving left to right. While doing this, it tracks the children nodes of the nodes on the current level. When finishing examining a level it moves to the left most node on the next level. The bottom-right most node is evaluated last (the node that is deepest and is farthest right of it's level). What you need to know Optimal for searching a tree that is wider than it is deep. Uses a queue to store information about the tree while it traverses a tree. Because it uses a queue it is more memory intensive than depth first search . The queue uses more memory because it needs to store pointers. Big O Efficiency Search Breadth First Search: O(|E| + |V|) E is number of edges V is number of vertices Depth First Search An algorithm that searches a tree (or graph) by searching depth of the tree first, starting at the root. It traverses left down a tree until it cannot go further. Once it reaches the end of a branch it traverses back up trying the right child of nodes on that branch, and if possible left from that right children. When finished examining a branch it moves to the node right of the root then tries to go left on all it's children until it reaches the bottom. The right most node is evaluated last (the node that is right of all it's ancestors). What you need to know Optimal for searching a tree that is deeper than it is wide. Uses a stack to push nodes onto. Because a stack is LIFO it does not need to keep track of the nodes pointers and is therefore less memory intensive than breadth first search . Once it cannot go further left it begins evaluating the stack. Big O Efficiency Search Depth First Search: O(|E| + |V|) E is number of edges. V is number of vertices. Breadth First Search Vs Depth First Search The simple to this question is that it depends on the size and shape of the tree. For wide, shallow trees use Breadth First Search For deep, narrow trees use Depth First Search Nuances: Because BFS uses queues to store information about the nodes and it's children, it could use more memory than is available on your computer. (But you probably won't have to worry about this.) If using a DFS on a tree that is very deep you might go unnecessarily deep in the search. Breadth First Search tends to be a looping algorithm. Depth First Search tends to be a recursive algorithm. Breadth-first search is guaranteed to find a shortest possible path through a graph. Depth-first search is not (and usually does not). DFS and BFS have no defined order in which the elements are searched. ( In the specific case of searching a tree for a specific node, there is only one possible path, so both will return the same result, but search algorithms are very rarely used this way; typically, they operate on arbitrary graphs. Additionally worth knowing is that most practically-used searching and pathfinding algorithms (e.g. Dijkstra's algorithm, A) are specializations of breadth-first search. ) Worst case space complexity: Data Structures: Array: O(n) Linked List: O(n) Hash Table: O(n) BST: O(n) Sorting: Quick Sort: O(log(n)) Merge Sort: O(n) Bubble Sort: O(1) Efficient Sorting Basics Merge Sort Definition A comparision based sorting algorithm Divides entire data set into groups of at most two. Compares each number one at a time, moving the smallest number to left of the pair. Once all pairs sorted then, it compares left most elements of the two left most pairs creating a sorted group of four with the smallest numbers on the left and the largest ones on the right. This process is repeated until there is only one set. What you need to know This is one of the most basic sorting algorithms. Know that it divides all the data into as small possible sets then compares them. Big O Efficiency Best Case Sort: Merge Sort O(n log n) Average Case Sort: Merge Sort O(n log n) Worst Case Sort: Merge Sort O(n log n) Quick Sort Definition A comparision based sorting algorithm Divides entire dataset in half by selecting the middle element and putting all smaller elements to the left of the average. It repeats this process on the left side until it is comparing only two elements at which point the left side is sorted. When the left side is finished sorting it performs the same operation on the right side. Computer architecture favours the quicksort process. (Edit: Quicksort picks a random element from the dataset as the pivot element, then sorts all elements smaller before that and all greater than the pivot after it. Then quicksort is executed on the part left of the pivot and right of it .) What you need to know While it has the same Big O as (or worse in some cases) many other sorting algorithms it is often faster in practice than merge sort. Know that it halves the data set by the average continuously until all the information is sorted. Big O Efficiency Best Case Sort: Quick Sort: O(n) Average Case Sort: Quick Sort: O(n log n) Worst Case Sort: Quick Sort: O(n^2) Bubble Sort Definition A comparision based sorting algorithm It iterates left to right comparing every couplet, moving the smaller element to the left. It repeats this process until it no longer moves an element to the left. What you need to know While it is very simple to implement, it is the least efficient of these three sorting methods. Know that it moves one space to the right comparing two elements at a time and moving the smaller on to left. Big O Efficiency Best Case Sort: Bubble Sort: O(n) Average Case Sort: Bubble Sort: O(n^2) Worst Case Sort: Bubble Sort: O(n^2) Merge Sort vs Quick Sort Quick Sort is likely faster in practice. Merge Sort divides the set into the smaller possible groups immediately then reconstructs the incrementally as it sorts the groupings. Quick Sort continually divides the set by the average, until the set is recursively sorted. Basic Types of Algorithms Recursive Algorithms Definition An algorithm that calls itself in it's definition. Recursive case is a conditional statement that is used to trigger the recursion. Base case is a conditional statement that is used to break the recursion. What you need to know Stack level too deep and stack overflow If you have seen either of these from a recursive algorithm, you messed up. It means that your base case was never triggered because it was faulty or the problem was so massive you ran out of stack before reaching it. Knowing weather or not you will reach a base case is integral to correctly using recursion. Often used in Depth First Search . Iterative Algorithms Definition An algorithm that is called repeatedly but for a finite number of times, each time being a single iteration. Often used to move incrementally through a data set. What you need to know Generally you will see iteration as loops: for, while and until statements. Think of iteration as moving one at a time through a set. Often used to move through an array. Recursion vs Iteration The differences between recursion and iteration can be confusing to distinguish since both can be used to implement the other. But know that, Recursion is, usually, more expressive and easier to implement. Iteration uses less memory. ( that's not true when the compiler or interpreter supports tail-call elimination, or can otherwise optimize recursive functions. ) Functional languages tend to use recursion. (i.e. Haskell) Imperative languages tend to use iteration. (i.e. Ruby) Greedy Algorithm Definition An algorithm that, while executing, selects only the information that meets a certain criteria. The general five components: A candidate set, from which a solution is created. A selection function, which chooses the best candidate to be added to the solution. A feasibility function, that is used to determine if a candidate can be used to contribute to a solution. An objective function, which assigns a valve to a solution, or a partial solution. A solution function, which indicate when we have discovered a complete solution. What you need to know Used to find the optimal solution to a given problem. Generally used on sets of data where only a small proportion of the information evaluated meets the desired result. Often a greedy algorithm can help reduce the Big O of an algorithm. Pseudo Code of a Greedy Algorithm to find largest difference of any two numbers in an array greedy algorithm (array) var largest difference = 0 var new difference = find next difference (array[n], array[n+1]) largest difference = new difference if new difference is > largest difference repeat above two steps until all the differences have been found return largest difference This algorithm never needed to compare all the differences to one another, saving it an entire iteration. Stream I/O Definition A stream is an abstract representation of sequence of bytes. It is usually buffered to prevent representing the entire sequence of bytes in memory at one time. Generally one-way and forward-only Has significant advantages over a standard array of bytes What you need to know Can be stored: In memory Transferred over a network On disk In a database Advantages over byte arrays Efficient use of memory Smaller memory footprint Uses Transferring files between persistence locations Compression / Decompression Encryption / Decryption Throttling Can be chained Some are one-way (NetworkStream, CipherStream, etc), others can seek in either direction. Summary S.No. Name Indexing Search Insertion Optimized Search 1 Linear Array O(1) O(n) N/A O(log n) 2 Dynamic Array O(1) O(n) o(n) O(log n) 3 Linked List O(n) O(n) O(1) O(n) 4 Hash Table O(1) O(1) O(1) 5 Binary Tree O(log n) O(log n) O(log n)","title":"Quick Review"},{"location":"review/#data-structure-basics","text":"","title":"Data Structure Basics"},{"location":"review/#arrays","text":"","title":"Arrays"},{"location":"review/#definition","text":"Stores data elements based on an sequential, most commonly 0 based, index. Based on Tuples from set theory. They are one of the oldest, most commonly used data structure. Can be many-dimensional to represent matrices","title":"Definition"},{"location":"review/#what-you-need-to-know","text":"Optimal for indexing; bad at searching, inserting, and deleting (except at the end). Linear Arrays , or one dimensional arrays are the most basic. Are static in size, meaning that they are declared with a fixed size. Dynamic Arrays are like one dimensional arrays, but have reserved space for additional elements. If a dynamic array is full, it copies it's contents to a larger array. Two Dimensional Arrays have x and y indices like a grid or nested arrays.","title":"What you need to know"},{"location":"review/#big-o-efficiency","text":"Indexing Linear Array: O(1), Dynamic Array: O(1) Search Linear Array: O(n), Dynamic Array: O(n) Optimized Search Linear Array: O(log n), Dynamic Array: O(log n) is Binary Search Insertion Linear Array: N/A, Dynamic Array: O(n)","title":"Big O Efficiency"},{"location":"review/#linked-list","text":"","title":"Linked List"},{"location":"review/#definition_1","text":"Stores data with nodes that points to other nodes. Nodes, at its most basic it has one datum and one reference (another node). A linked list chains nodes together by pointing one node's reference towards another node.","title":"Definition"},{"location":"review/#what-you-need-to-know_1","text":"Designed to optimize insertion and deletion, slow at indexing and searching. Doubly linked list has nodes that also reference the previous node. Circular linked list is simple linked list whose tail , the last node, references the head , the first node. Stack , commonly implemented with linked lists but can be made from arrays too. Stack are last in, first out (LIFO) data structures. Made with a linked list by having the head be the only place for insertion and removal. Queues , too can be implemented with an linked list or an array. Queues are a first in, first out (FIFO) data structure. Made with a doubly linked list that only removes from head and adds to tail.","title":"What you need to know"},{"location":"review/#big-o-efficiency_1","text":"Indexing Linked Lists: O(n) Search Linked Lists: O(n) Optimized Search Linked Lists: O(n) Insertion Linked Lists: O(n)","title":"Big O Efficiency"},{"location":"review/#hash-table-or-hash-map","text":"","title":"Hash Table or Hash Map"},{"location":"review/#definition_2","text":"Stores data with key value pairs. And don't generally have an order. Hash functions accept arbitrary sized data and map it to fixed size data. The mapping is not guaranteed to be unique. This is known as hashing , which is the concept that an input and an output have a one-to-one correspondence to map information. Hash functions return a unique address in memory for that data.","title":"Definition"},{"location":"review/#what-you-need-to-know_2","text":"Designed to optimize searching, insertion, and deletion Hash collisions are when a hash function returns the same output for two distinct inputs. All hash functions have this problem. This is often accommodated for by having the hash tables be very large. Hashes are important for associated arrays and database indexing.","title":"What you need to know"},{"location":"review/#big-o-efficiency_2","text":"Indexing Hash Tables: O(1) Search Hash Tables: O(1) Insertion Hash Tables: O(1)","title":"Big O Efficiency"},{"location":"review/#binary-tree","text":"","title":"Binary Tree"},{"location":"review/#definition_3","text":"Is a tree like data structure where every node has at most two children. There is one left and right child node.","title":"Definition"},{"location":"review/#what-you-need-to-know_3","text":"Designed to optimize searching and sorting. A degenerate tree is an unbalanced tree, which if entirely one-sided is an essentially a linked list. They are comparably simple to implement than other data structures. Used to make binary search trees . A binary tree that uses comparable keys to assign which direction a child is. Left child has a key smaller than it's parent node. Right child has a key greater than it's parent node. There can be no duplicate node. Because of the above it is more likely to be used as a data structure than a binary tree.","title":"What you need to know"},{"location":"review/#big-o-efficiency_3","text":"Indexing Binary Search Tree: O(log n) Search Binary Search Tree: O(log n) Insertion Binary Search Tree: O(log n)","title":"Big O Efficiency"},{"location":"review/#search-basics","text":"","title":"Search Basics"},{"location":"review/#breadth-first-search","text":"","title":"Breadth First Search"},{"location":"review/#definition_4","text":"An algorithm that searches a tree (or graph) by searching levels of the tree first, starting at the root. It finds every node on the same level, most often moving left to right. While doing this, it tracks the children nodes of the nodes on the current level. When finishing examining a level it moves to the left most node on the next level. The bottom-right most node is evaluated last (the node that is deepest and is farthest right of it's level).","title":"Definition"},{"location":"review/#what-you-need-to-know_4","text":"Optimal for searching a tree that is wider than it is deep. Uses a queue to store information about the tree while it traverses a tree. Because it uses a queue it is more memory intensive than depth first search . The queue uses more memory because it needs to store pointers.","title":"What you need to know"},{"location":"review/#big-o-efficiency_4","text":"Search Breadth First Search: O(|E| + |V|) E is number of edges V is number of vertices","title":"Big O Efficiency"},{"location":"review/#depth-first-search","text":"An algorithm that searches a tree (or graph) by searching depth of the tree first, starting at the root. It traverses left down a tree until it cannot go further. Once it reaches the end of a branch it traverses back up trying the right child of nodes on that branch, and if possible left from that right children. When finished examining a branch it moves to the node right of the root then tries to go left on all it's children until it reaches the bottom. The right most node is evaluated last (the node that is right of all it's ancestors).","title":"Depth First Search"},{"location":"review/#what-you-need-to-know_5","text":"Optimal for searching a tree that is deeper than it is wide. Uses a stack to push nodes onto. Because a stack is LIFO it does not need to keep track of the nodes pointers and is therefore less memory intensive than breadth first search . Once it cannot go further left it begins evaluating the stack.","title":"What you need to know"},{"location":"review/#big-o-efficiency_5","text":"Search Depth First Search: O(|E| + |V|) E is number of edges. V is number of vertices.","title":"Big O Efficiency"},{"location":"review/#breadth-first-search-vs-depth-first-search","text":"The simple to this question is that it depends on the size and shape of the tree. For wide, shallow trees use Breadth First Search For deep, narrow trees use Depth First Search","title":"Breadth First Search Vs Depth First Search"},{"location":"review/#nuances","text":"Because BFS uses queues to store information about the nodes and it's children, it could use more memory than is available on your computer. (But you probably won't have to worry about this.) If using a DFS on a tree that is very deep you might go unnecessarily deep in the search. Breadth First Search tends to be a looping algorithm. Depth First Search tends to be a recursive algorithm. Breadth-first search is guaranteed to find a shortest possible path through a graph. Depth-first search is not (and usually does not). DFS and BFS have no defined order in which the elements are searched. ( In the specific case of searching a tree for a specific node, there is only one possible path, so both will return the same result, but search algorithms are very rarely used this way; typically, they operate on arbitrary graphs. Additionally worth knowing is that most practically-used searching and pathfinding algorithms (e.g. Dijkstra's algorithm, A) are specializations of breadth-first search. )","title":"Nuances:"},{"location":"review/#worst-case-space-complexity","text":"","title":"Worst case space complexity:"},{"location":"review/#data-structures","text":"Array: O(n) Linked List: O(n) Hash Table: O(n) BST: O(n)","title":"Data Structures:"},{"location":"review/#sorting","text":"Quick Sort: O(log(n)) Merge Sort: O(n) Bubble Sort: O(1)","title":"Sorting:"},{"location":"review/#efficient-sorting-basics","text":"","title":"Efficient Sorting Basics"},{"location":"review/#merge-sort","text":"","title":"Merge Sort"},{"location":"review/#definition_5","text":"A comparision based sorting algorithm Divides entire data set into groups of at most two. Compares each number one at a time, moving the smallest number to left of the pair. Once all pairs sorted then, it compares left most elements of the two left most pairs creating a sorted group of four with the smallest numbers on the left and the largest ones on the right. This process is repeated until there is only one set.","title":"Definition"},{"location":"review/#what-you-need-to-know_6","text":"This is one of the most basic sorting algorithms. Know that it divides all the data into as small possible sets then compares them.","title":"What you need to know"},{"location":"review/#big-o-efficiency_6","text":"Best Case Sort: Merge Sort O(n log n) Average Case Sort: Merge Sort O(n log n) Worst Case Sort: Merge Sort O(n log n)","title":"Big O Efficiency"},{"location":"review/#quick-sort","text":"","title":"Quick Sort"},{"location":"review/#definition_6","text":"A comparision based sorting algorithm Divides entire dataset in half by selecting the middle element and putting all smaller elements to the left of the average. It repeats this process on the left side until it is comparing only two elements at which point the left side is sorted. When the left side is finished sorting it performs the same operation on the right side. Computer architecture favours the quicksort process. (Edit: Quicksort picks a random element from the dataset as the pivot element, then sorts all elements smaller before that and all greater than the pivot after it. Then quicksort is executed on the part left of the pivot and right of it .)","title":"Definition"},{"location":"review/#what-you-need-to-know_7","text":"While it has the same Big O as (or worse in some cases) many other sorting algorithms it is often faster in practice than merge sort. Know that it halves the data set by the average continuously until all the information is sorted.","title":"What you need to know"},{"location":"review/#big-o-efficiency_7","text":"Best Case Sort: Quick Sort: O(n) Average Case Sort: Quick Sort: O(n log n) Worst Case Sort: Quick Sort: O(n^2)","title":"Big O Efficiency"},{"location":"review/#bubble-sort","text":"","title":"Bubble Sort"},{"location":"review/#definition_7","text":"A comparision based sorting algorithm It iterates left to right comparing every couplet, moving the smaller element to the left. It repeats this process until it no longer moves an element to the left.","title":"Definition"},{"location":"review/#what-you-need-to-know_8","text":"While it is very simple to implement, it is the least efficient of these three sorting methods. Know that it moves one space to the right comparing two elements at a time and moving the smaller on to left.","title":"What you need to know"},{"location":"review/#big-o-efficiency_8","text":"Best Case Sort: Bubble Sort: O(n) Average Case Sort: Bubble Sort: O(n^2) Worst Case Sort: Bubble Sort: O(n^2)","title":"Big O Efficiency"},{"location":"review/#merge-sort-vs-quick-sort","text":"Quick Sort is likely faster in practice. Merge Sort divides the set into the smaller possible groups immediately then reconstructs the incrementally as it sorts the groupings. Quick Sort continually divides the set by the average, until the set is recursively sorted.","title":"Merge Sort vs Quick Sort"},{"location":"review/#basic-types-of-algorithms","text":"","title":"Basic Types of Algorithms"},{"location":"review/#recursive-algorithms","text":"","title":"Recursive Algorithms"},{"location":"review/#definition_8","text":"An algorithm that calls itself in it's definition. Recursive case is a conditional statement that is used to trigger the recursion. Base case is a conditional statement that is used to break the recursion.","title":"Definition"},{"location":"review/#what-you-need-to-know_9","text":"Stack level too deep and stack overflow If you have seen either of these from a recursive algorithm, you messed up. It means that your base case was never triggered because it was faulty or the problem was so massive you ran out of stack before reaching it. Knowing weather or not you will reach a base case is integral to correctly using recursion. Often used in Depth First Search .","title":"What you need to know"},{"location":"review/#iterative-algorithms","text":"","title":"Iterative Algorithms"},{"location":"review/#definition_9","text":"An algorithm that is called repeatedly but for a finite number of times, each time being a single iteration. Often used to move incrementally through a data set.","title":"Definition"},{"location":"review/#what-you-need-to-know_10","text":"Generally you will see iteration as loops: for, while and until statements. Think of iteration as moving one at a time through a set. Often used to move through an array.","title":"What you need to know"},{"location":"review/#recursion-vs-iteration","text":"The differences between recursion and iteration can be confusing to distinguish since both can be used to implement the other. But know that, Recursion is, usually, more expressive and easier to implement. Iteration uses less memory. ( that's not true when the compiler or interpreter supports tail-call elimination, or can otherwise optimize recursive functions. ) Functional languages tend to use recursion. (i.e. Haskell) Imperative languages tend to use iteration. (i.e. Ruby)","title":"Recursion vs Iteration"},{"location":"review/#greedy-algorithm","text":"","title":"Greedy Algorithm"},{"location":"review/#definition_10","text":"An algorithm that, while executing, selects only the information that meets a certain criteria. The general five components: A candidate set, from which a solution is created. A selection function, which chooses the best candidate to be added to the solution. A feasibility function, that is used to determine if a candidate can be used to contribute to a solution. An objective function, which assigns a valve to a solution, or a partial solution. A solution function, which indicate when we have discovered a complete solution.","title":"Definition"},{"location":"review/#what-you-need-to-know_11","text":"Used to find the optimal solution to a given problem. Generally used on sets of data where only a small proportion of the information evaluated meets the desired result. Often a greedy algorithm can help reduce the Big O of an algorithm.","title":"What you need to know"},{"location":"review/#pseudo-code-of-a-greedy-algorithm-to-find-largest-difference-of-any-two-numbers-in-an-array","text":"greedy algorithm (array) var largest difference = 0 var new difference = find next difference (array[n], array[n+1]) largest difference = new difference if new difference is > largest difference repeat above two steps until all the differences have been found return largest difference This algorithm never needed to compare all the differences to one another, saving it an entire iteration.","title":"Pseudo Code of a Greedy Algorithm to find largest difference of any two numbers in an array"},{"location":"review/#stream-io","text":"","title":"Stream I/O"},{"location":"review/#definition_11","text":"A stream is an abstract representation of sequence of bytes. It is usually buffered to prevent representing the entire sequence of bytes in memory at one time. Generally one-way and forward-only Has significant advantages over a standard array of bytes","title":"Definition"},{"location":"review/#what-you-need-to-know_12","text":"Can be stored: In memory Transferred over a network On disk In a database Advantages over byte arrays Efficient use of memory Smaller memory footprint Uses Transferring files between persistence locations Compression / Decompression Encryption / Decryption Throttling Can be chained Some are one-way (NetworkStream, CipherStream, etc), others can seek in either direction.","title":"What you need to know"},{"location":"review/#summary","text":"S.No. Name Indexing Search Insertion Optimized Search 1 Linear Array O(1) O(n) N/A O(log n) 2 Dynamic Array O(1) O(n) o(n) O(log n) 3 Linked List O(n) O(n) O(1) O(n) 4 Hash Table O(1) O(1) O(1) 5 Binary Tree O(log n) O(log n) O(log n)","title":"Summary"}]}